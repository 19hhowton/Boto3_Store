#### SETTING UP ####
##	Displays the path of the current directory.
pwd 

## Change directory
cd <path>
# Parent directory (a go back button)
cd .. 

## Create a new folder in the current directory
mkdir my-git-repos

##  Intialize repo on workstation 
$ git init

##  Intialize repo by cloning an existing repo  using the HTTPS
#
$ git clone <URL>
# Change name of folder AND clone
$ git clone <URL> name-of-folder-you-want-to-give

## After Tell git who you are
$ git config --global user.name "19hhowton"
$ git config --global user.email "19hhowton@gmail.com"

## After cloning, see if the file is added, move to your cloned file, check to see what's in the file 
$ ls
$ cd noob-2
$ ls

## See “all” files and folders (including hidden ones)
$ ls -A

## Open VSCode with the currently focused directory of terminal
$ code .



#### MAKING CHANGES TO YOUR GIT REPO ON YOUR MACHINE  ####
## Check the status 
$ git status

## Commit work to git repo folder
$ git commit -m "enter message"

## Add a file
$ git add <file1> <file2> <etc>

## Commit changes
$ git commit -m "made new file called stratch.py"



#### BRANCHES ####
# switched to a new branch crazy-idea-1
$ git checkout -b crazy-idea-1

$ git checkout main

## Shows the git branch you're in
$ git branch

## lists all the commits in the current branch, with the latest commit at the top, followed by its parent, and so on
$ git log

# git status
$ git status

# Make a branch
$ git branch <file>

# View branches in repo
$ git branch

# Switch branches
$ git switch

# Switch and create branch
$ git switch -c my-first-branch

# Merge tp the the main/proposer (must be switched into main)
$ git merge <proposee>
$ git merge <proposee> -m "Merge branch 'add-thurs-menu'"

# How to get documentation to pop up
$ git <command> --help
$ git help <command>
$ git <command> --h #shorter version



#### BRANCH DANGER ZONE ####
# How to delete branch
$ git branch -d <branch>

# What does this do?
$ git branch -D <branch>

# Undo accidental delete
$ git branch <branch> <branch-commit-id>



#### LOG ####
$ git log

#  truncate commit id
$ git log --abbrev-commit

#  exclide info about author and date
$ git log --pretty=oneline

# exclide info about author and date AND truncate commit id
$ git log --oneline

#  display all commits as a graph
$ git log --graph

#  display commits of all branches in repo
$ git log --all



#### DIFF ####
#  display commits of all branches in repo
# a is index content. b is working directory
$ git diff

#  individual words differ rather than lines differgit 
$ git diff --word-diff

#  different tools to display diffs
$ git diff --tool-help

#  diff contents between last commit and index (like shifting over the commit)
# a is object database. b is index content
$ git diff --cached
$ git diff --staged #same thing

# diff between the last commits of two branches
$ git diff <a-, taget_branch> <b+, source_branch2>

git diff <commita> <commitb>



#### COMMIT/ADD DANGER ZONE ####
# index moved back to working directory, overwriting the workdir
# fun idea: check with git status
# opposite of add
$ git restore <file>
$ git restore file-a file-b file-c #restore multiple files

# overwrites content in index with last recorded commit
# opposite of commit
# not undoing the commit
$ git restore --staged <file>

# removes tracked files from working directory and index
$ git rm <file>

# removes tracked directory and files from w.d. and index
# -r means recursive
$ git rm -r <file> 

# delete unrtacked files from directory
-> file explorer

# renames or moves tracked files from w.d. and index
$ git mv <old-file-name> <new-file-name>

# edit commit messages
# must be on the same branch as the commit AND clean 
# working directory (check with git status)
$ git commit --amend

# Change the name of a branch
$ git branch -m <new branch name> # This works if in branch
$ git branch -move <branch-current-name> <branch-new-name>

# 
$ git diff HEAD ~1
$ git diff <> <>
$ git diff HEAD ~1^1
$ git diff HEAD ~1^2

# moves head and branch to commit specified
# Erase history (pencil and erase with math)
$ git reset --soft HEAD~1 #moves back to index and copies to w.d. 
# Like you never made a commit to begin with
$ git reset --mixed HEAD~1
$ git reset HEAD~1
$ git reset --hard HEAD~1 #DESTRUCTIVE USE REVERT

# creates new commit, keeps previous commit in the log, 
# but that previous commit is now undone, with a clean working tree
# Keep history (pen and x out with math - keep your errors :) )
$ git revert HEAD



#### PUSH ####
## Sync local changes with remote and publish your local commits
# The first time will request username and password (personal access token)
$ git push 

## Tell git to error out when you push
$ git config --global push.default simple
# confirm if changes stuck
$ git config push.default

## Get the url of the origin of the git repo
$ git remote
$ git remote -v
>>> origin  https://github.com/19hhowton/working-with-remotes.git (fetch)
>>> origin  https://github.com/19hhowton/working-with-remotes.git (push)

## Push a local branch
# Why specify origin? You need to tell which remote to push through
$ git push #not suggested but seams to work
$ git push --set-upstream origin <feature_branch_name>
$ git push --su origin <feature_branch_name>



#### GIT CONFIG ####
## Set our email
$ git config --global user.name "19hhowton"
$ git config --global user.email "19hhowton@gmail.com"

## Set our default editor
$ git config --global core.editor "code -w"

## Set Git’s behavior when it comes to pushing branches
## Tell git to error out when you push
$ git config --global push.default simple
# confirm if changes stuck
$ git config push.default

## Configure credentials  
$ credential.helper

## After I cloned a repo, I got this.
 git config --global --add safe.directory P:/CSpCloud/H_Workspace/GitHuFunction_Store



#### ALIASES ####
## Git add and commit in one command using aliases
#
$ git config --global alias.add-commit '!git add -A && git commit'
$ git add-commit -m 'My commit message'
# unset the alias (your alias is <ac>)
$ git config --global --unset alias.<your_alias>
